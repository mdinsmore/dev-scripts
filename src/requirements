#!/bin/bash
#
# allow different development directory
# Assume the docs directory is module/docs within the development directory
#
BLACK="\033[0;30m"
RED="\033[0;31m"
BLUE="\033[0;34m"
GREEN="\033[0;32m"
NC="\033[0m"

function show_help() {
	echo -e "Usage:\n\t$0 [-v|-h|-p\n\n"

	echo -e "\n\t-h - displays this message"
	echo -e "\n\t-p - pull docs: pulls the docs to get recent updates to requirements\n"
	echo -e "\n\t-v - verbose: displays commits for apps with unreleased updates"

}
if [ "${DEVELOPMENT_DIR}" == "" ];then
	DEVELOPMENT_DIR="$HOME/dev/"
else
	idx=$((${#DEVELOPMENT_DIR}-1))
	if [ "${DEVELOPMENT_DIR:$idx:1}" != "/" ];then
		DEVELOPMENT_DIR="${DEVELOPMENT_DIR}/"
	fi
fi

if [ "${DOCS_DIR}" == "" ];then
	DOCS_DIR="${DEVELOPMENT_DIR}module/docs"
fi


OPTIND=1  # Reset in case getopts has been used previously in the shell.

while getopts "h?vp" opt; do
	case "$opt" in
	v)  verbose=true
		APP_VERSION_ARGS="-v"
		;;
	p)  pull_docs=true
		;;
	h|\?)
		show_help
		exit 0
		;;
	esac
done

shift $((OPTIND-1))


if [ "$pull_docs" = true ];then
	CURR_DIR=`pwd`
	cd ${DOCS_DIR}
	if [ `pwd` != ${DOCS_DIR} ];then
		echo "Could not change to ${DOCS_DIR}"
	else
		git pull
	fi
	cd ${CURR_DIR}
fi

if [ "${REQUIREMENTS_REFERENCE}" == "" ];then
	REQUIREMENTS_REFERENCE="${DOCS_DIR}/source/dev-requirements.rst"
fi

if [ "${REQUIREMENTS_FILE}" == "" ];then
	REQUIREMENTS_FILE="requirements/base.txt"
fi

if [ ! -f  "${REQUIREMENTS_REFERENCE}" ]; then
	echo -e "\nReference file '${REQUIREMENTS_REFERENCE}' does not exist\n"
	exit 2
fi

if [ ! -f  "${REQUIREMENTS_FILE}" ]; then
	echo -e "\nRequirements file '${REQUIREMENTS_FILE}' does not exist\n"
	exit 2
fi
TICK=$(echo -e "${GREEN}\xE2\x9C\x94${NC}")

function print_line() {
	echo "$1|$2|$3|$4" | awk -F\| '{ printf "%-20.20s %15.15s    %-30.30s %s\n", $1, $2, $3, $4 }'
}

echo ""
print_line "Package" "Current Version" "$(echo -e "${BLACK}Reference Version${NC}")" "Installed"
print_line "-------" "---------------" "$(echo -e "${BLACK}-----------------${NC}")" "---------"

pip freeze > /tmp/pip$$

for REQ in `grep == ${REQUIREMENTS_FILE}`; do
	CURR_PACKAGE=`echo ${REQ} | cut -d'=' -f1`

	# ignore --no-binary and commented out lines
	if [[ "$CURR_PACKAGE" == "--no-binary" ]] || [[ "$CURR_PACKAGE" == \#* ]];then
		continue
	fi

	CURR_VERSION=`echo ${REQ} | cut -d'=' -f3`
	INST_VERSION=`grep "^$CURR_PACKAGE==" /tmp/pip$$ | cut -d'=' -f3`

	REF=`grep "^  ${CURR_PACKAGE}==" ${REQUIREMENTS_REFERENCE}`
	REF_PACKAGE=`echo ${REF} | cut -d'=' -f1`
	REF_VERSION=`echo ${REF} | cut -d'=' -f3 | cut -d' ' -f1`

	if [ "${CURR_VERSION}" != "${REF_VERSION}" ];then
		REF_VERSION_TEXT="$(echo -e "${RED}${REF_VERSION}${NC}")"
	else
		REF_VERSION_TEXT="$(echo -e "${GREEN}up to date${NC}")"
	fi

	if [ "${CURR_VERSION}" != "${INST_VERSION}" ];then
		INST_VERSION_TEXT="$(echo -e "${RED}${INST_VERSION}${NC}")"
	else
		INST_VERSION_TEXT=${TICK}
	fi
	print_line "${CURR_PACKAGE}" "${CURR_VERSION}" "${REF_VERSION_TEXT}" "${INST_VERSION_TEXT}"
done

echo ""

if [ -f 'requirements/production.txt' ];then
	echo "App Versions"
	echo "------------"
	app-version $APP_VERSION_ARGS
fi
