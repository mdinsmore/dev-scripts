#!/bin/bash
APP_BASE_DIR="$HOME/dev/app"
PROJECT_DIR=`pwd`
BRANCH_NAME=`git status| grep "^On branch "| cut -c10-`
BRANCH_INFO_FILE="requirements/branch.txt"
BRANCH_YAML_FILE="requirements/branch.yaml"
RED="\033[0;31m"
GREEN="\033[0;32m"
NC="\033[0m"
git config --global color.ui always
function parse_yaml_section() {
   local section=$2
   local temp_file_name=$3
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')

   echo "YAML FILE: $1"
   echo "Section: $section"
   echo "Temp File Name: ${temp_file_name}"

   sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])}
         # printf("%s  -  %s\n", vn, "'$section'")
         if (vn == "'$section'") {
            printf("%s|%s\n", $2, $3)
         }
      }
   }' > ${temp_file_name}
}

if [ -f ${BRANCH_YAML_FILE} ]
then
	SECTION=`echo $BRANCH_NAME | sed -e "s|-||g"`
	TEMP_FILE=/tmp/branch-$$.txt
	parse_yaml_section ${BRANCH_YAML_FILE} "${SECTION}" ${TEMP_FILE}
	
	echo "Using the '$BRANCH_NAME' section:"
	if [ -s ${TEMP_FILE} ]
	then
		echo "App                  Branch"
		cat ${TEMP_FILE} | awk -F "|" '{ printf("%-20.20s %s\n", $1, $2) }'
		
		BRANCH_INFO_FILE=${TEMP_FILE}
	fi
fi

if [ ! -s ${BRANCH_INFO_FILE} ]
then
	echo -e "\n\nThe file ${BRANCH_INFO_FILE} does not exist"
	exit 2
fi

PREV_UP_TO_DATE=true

for APP in `grep "^-e .." requirements/local.txt | cut -c14-`
do 
	cd $PROJECT_DIR
	LINE=`grep "^$APP|" ${BRANCH_INFO_FILE}`

	if [ "x$LINE" = "x" ]
	then
		echo "The app '$APP' is not specified in ${BRANCH_INFO_FILE}"
	else
		APP=`echo $LINE | cut -d'|' -f1`
		BRANCH=`echo $LINE | cut -d'|' -f2`
		APP_DIR="$APP_BASE_DIR/$APP"
		GIT_OUT=""
		cd $APP_DIR
		echo -e "\rProcessing ${APP}... \c"
		BRANCH_SWITCHED=false

		if [ "$APP_DIR" != `pwd` ]
		then
			msg="${RED}Could not change to '${APP_DIR}'${NC}"
		else
			CURRENT=`git fetch && git status | grep "^On branch " | cut -c11-`
			if [ "$CURRENT" != "$BRANCH" ]
			then
				echo -e "\rProcessing ${APP} - Checking out branch '$BRANCH' ...\c"
				GIT_OUT=`git checkout $BRANCH 2>&1`
				BRANCH_SWITCHED=true
				msg="${GREEN}Checked out branch '${BRANCH}${NC}'\n${GIT_OUT}"
			else 
				msg="already on branch '${BRANCH}'"
			fi
			GIT_OUT=`git pull 2>&1`
		fi
		if [ "${GIT_OUT}" = "Already up-to-date." ]; then
			CURR_UP_TO_DATE=true
			if [ ${BRANCH_SWITCHED} = false ];then
				msg="${msg} and up to date"
			fi
		else
			CURR_UP_TO_DATE=false
		fi
		if [ ${BRANCH_SWITCHED} = true -o \( ${PREV_UP_TO_DATE} = false -a ${CURR_UP_TO_DATE} = true \) ];then
			echo -e "\r============================================================="
		fi
		echo -e "\r${APP} : $msg"
		if [ ! ${CURR_UP_TO_DATE} ]; then
			echo "${GIT_OUT}"
		fi

		PREV_UP_TO_DATE=${CURR_UP_TO_DATE}

		if [ ${BRANCH_SWITCHED} = true ]; then
			PREV_UP_TO_DATE=false
		fi
	fi
done


if [ "x${TEMP_FILE}" != "x" -a -f "${TEMP_FILE}" ]
then
	rm ${TEMP_FILE}
fi
