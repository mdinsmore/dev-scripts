#!/bin/bash

appDir=$HOME/dev/app
projDir=.
RED="\033[0;31m"
GREEN="\033[0;32m"
NC="\033[0m"
TICK=$(echo -e "${GREEN}\xe2\x9c\x94${NC}")
FLAG=$(echo -e "${RED}\xe2\x9a\x91${NC}")
CROSS=$(echo -e "${RED}\xe2\x9c\x97${NC}")

function show_help() {
	echo -e "Usage:\n\t$0 [-v|-h|-p<project name>\n\n"
}

function print_line() {
	echo "$1|$2|$3|$4|$5" | awk -F\| '{ printf "%-20.20s %15.15s    %-35.35s %-20.20s %s\n", $1, $2, $3, $4, $5 }'
}

function print_underlined() {
	str=$1
	echo -e "$str"
	len_str=$(echo "$str" | wc -c)
	count=1
	while [ $count -lt $len_str ]; do
		echo -n "-"
		count=$(expr $count + 1)
	done
	echo ""
}

OPTIND=1  # Reset in case getopts has been used previously in the shell.

while getopts "h?vp:" opt; do
	case "$opt" in
	v)  verbose=true
		;;
	p)  projDir=$OPTARG
		;;
	h|\?)
		show_help
		exit 0
		;;
	esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [ "$projDir" == "." ]; then
	projDir=`pwd`
fi

for appName in `ls $appDir`; do
	cd $appDir/$appName
	version=$(git log -1 | grep "^    version " | cut -d' ' -f6)
	branch=$(git status | grep "On branch" | awk '{ print $3 }')
	if [ ! -f setup.py ]; then 
		>&2 echo -e "N.B.: setup.py does not exist in app \'$appName\'"
	else
		relVersion=`tr -d ' ' < setup.py| grep "^version=" | sed -e 's/version=//g' | sed -e 's/,//g' | sed "s/^\([\"']\)\(.*\)\1\$/\2/g"`
	fi
	echo "$appName|$version|$relVersion|$branch"
done >> /tmp/version-$$.txt


cd $projDir

hasUnreleased=()

for appLine in `cat requirements/production.txt | grep "=="`
do
	prefix=`echo $appLine | cut -d"=" -f1| cut -c1-3`
	if [ ${prefix} == "kb-" ];then
		package=`echo $appLine | cut -d"=" -f1| cut -c4-`
		projVersion=`echo $appLine | cut -d"=" -f3`

		appVersion=`grep "^$package|" /tmp/version-$$.txt | cut -d'|' -f2`
		relVersion=`grep "^$package|" /tmp/version-$$.txt | cut -d'|' -f3`
		appBranch=`grep "^$package|" /tmp/version-$$.txt | cut -d'|' -f4`
		projBranch=`grep "^$package|" requirements/branch.txt | cut -d'|' -f2`
		if [ "$projBranch" == "" -o "$appBranch" == "" ]; then
			branchEqual=$FLAG
		elif [ "$projBranch" ==  "$appBranch" ];then
			branchEqual=$TICK
		else
			branchEqual=$CROSS
		fi
		if [ "$projVersion" = "$appVersion" ]; then
			print_line $package $projVersion "up to date" "$appBranch" "$branchEqual"
		else
			if [ "$appVersion" = "" ]; then
				print_line $package $projVersion "Unreleased updates ($relVersion)" "$appBranch" "$branchEqual"
				hasUnreleased+=" $package"
			else
				print_line $package $projVersion "New Version: $appVersion" "$appBranch" "$branchEqual"
			fi
		fi
	else
		package=`echo $appLine | cut -d"=" -f1`
		projVersion=`echo $appLine | cut -d"=" -f3`
			print_line $package $projVersion "" "" ""
	fi
done

rm /tmp/version-$$.txt

if [ "$verbose" = true ]; then
	if [ "$hasUnreleased" != "" ];then
		echo -e "\nView recent commits for apps with unreleased updates (${hasUnreleased#"${hasUnreleased%%[![:space:]]*}"}) (Y/n)? \c"
		read viewGit

		if [ "$viewGit" != "n" -a "$viewGit" != "N" ]; then
		echo "===================================================================="
		for app in $hasUnreleased; do
			print_underlined "Last 3 commits for $app"
			app-gitlog $app -3
			echo "===================================================================="
		done
		fi
	fi
fi
