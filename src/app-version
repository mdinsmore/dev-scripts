appDir=$HOME/dev/app
projDir=.
TICK=$(echo -e "\xe2\x9c\x94")
FLAG=$(echo -e "\xe2\x9a\x91")
CROSS=$(echo -e "\xe2\x9c\x97")

function show_help() {
	echo -e "Usage:\n\t$0 [-v|-h|-p<project name>\n\n"
}
function print_line() {
	echo "$1|$2|$3|$4|$5" | awk -F\| '{ printf "%-20.20s %15.15s    %-35.35s %-20.20s %s\n", $1, $2, $3, $4, $5 }'
}

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
verbose=0

while getopts "h?vp:" opt; do
	case "$opt" in
	v)  verbose=1
		;;
	p)  projDir=$OPTARG
		;;
	h|\?)
		show_help
		exit 0
		;;
	esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

if [ "$verbose" = "1" ]; then
	echo "verbose=$verbose, project='$projDir', Leftovers: $@"
fi

if [ "$projDir" == "." ]; then
	projDir=`pwd`
fi

for i in `ls $appDir`; do
	cd $appDir/$i
	version=$(git log -1 | grep "^    version " | cut -d' ' -f6)
	branch=$(git status | grep "On branch" | awk '{ print $3 }')
	relVersion=`tr -d ' ' < setup.py| grep "^version=" | sed -e 's/version=//g' | sed -e 's/,//g' | sed "s/^\([\"']\)\(.*\)\1\$/\2/g"`
	echo "$i $version $relVersion $branch"
done >> /tmp/version-$$.txt

if [ "$verbose" = "1" ]; then
	cat /tmp/version-$$.txt
fi

cd $projDir

for i in `cat requirements/production.txt | grep "=="`
do
	prefix=`echo $i | cut -d"=" -f1| cut -c1-3`
	if [ ${prefix} == "kb-" ];then
		package=`echo $i | cut -d"=" -f1| cut -c4-`
		projVersion=`echo $i | cut -d"=" -f3`

		appVersion=`grep "^$package" /tmp/version-$$.txt | cut -d' ' -f2`
		relVersion=`grep "^$package" /tmp/version-$$.txt | cut -d' ' -f3`
		appBranch=`grep "^$package" /tmp/version-$$.txt | cut -d' ' -f4`
		projBranch=`grep "^$package" requirements/branch.txt | cut -d'|' -f2`
		if [ "$projBranch" == "" -o "$appBranch" == "" ]; then
			branchEqual=$FLAG
		elif [ "$projBranch" ==  "$appBranch" ];then
			branchEqual=$TICK
		else
			branchEqual=$CROSS
		fi

		if [ "$projVersion" = "$appVersion" ]; then
			print_line $package $projVersion "up to date" "$appBranch" "$branchEqual"
			# echo "App '$package' (version $projVersion) is up to date"
		else
			if [ "$appVersion" = "" ]; then
				print_line $package $projVersion "Unreleased updates ($relVersion)" "$appBranch" "$branchEqual"
				# echo "App '$package' (version $projVersion) has unreleased updates ($relVersion)"
			else
				print_line $package $projVersion "New Version: $appVersion" "$appBranch" "$branchEqual"
				# echo "App '$package' (version $projVersion) is not up to date, current version is $appVersion"
			fi
		fi
	else
		package=`echo $i | cut -d"=" -f1`
		projVersion=`echo $i | cut -d"=" -f3`
			print_line $package $projVersion "" "" ""
	fi
done

rm /tmp/version-$$.txt
